Базовая установка
==================

   Это общие инструкции по установке.

   Сценарий оболочки `configure 'пытается угадать правильные значения для
различные системные переменные, используемые во время компиляции. Оно использует
эти значения для создания Makefile в каждом каталоге пакета.
Он также может создать один или несколько файлов с расширением .h, содержащих системные файлы.
определения. Наконец, он создает сценарий оболочки `config.status ', который
вы можете запустить в будущем, чтобы воссоздать текущую конфигурацию, файл
config.cache, который сохраняет результаты своих тестов для ускорения
реконфигурирование, и файл `config.log ', содержащий вывод компилятора
(полезно в основном для отладки `configure ').

   Если вам нужно сделать необычные вещи для компиляции пакета, попробуйте
чтобы выяснить, как `configure 'может проверять, делать ли их, и отправить
разница или инструкции по адресу, указанному в `README ', чтобы они могли
будут рассмотрены для следующего выпуска. Если в какой-то момент `config.cache '
содержит результаты, которые вы не хотите сохранять, вы можете удалить или отредактировать его.

   Файл `configure.in 'используется для создания` configure' программой
называется `autoconf '. Вам нужен только `configure.in ', если вы хотите изменить
или повторно создайте `configure ', используя более новую версию` autoconf'.

The simplest way to compile this package is:

  1. `cd 'в каталог, содержащий исходный код пакета и введите
     `./configure 'для настройки пакета для вашей системы. Если вы
     используя `csh 'в старой версии System V, вам может потребоваться ввести
     sh ./configure вместо того, чтобы предотвратить попытки csh выполнить
     сам `configure '.

     Запуск `configure 'требует времени. Во время работы печатает
     сообщения о том, какие функции он проверяет.

  2. Наберите `make ', чтобы скомпилировать пакет.

  3. Введите `make install ', чтобы установить программы и любые файлы данных и
     документация.

  4. Вы можете удалить двоичные файлы программы и объектные файлы из
     каталог исходного кода, набрав `make clean '.  

Компиляторы и опции
=====================

   Некоторые системы требуют необычных опций для компиляции или связывания
сценарий `configure 'не знает о файлах. Вы можете дать `configure '
начальные значения для переменных, задав их в среде. С помощью
оболочку, совместимую с Bourne, вы можете сделать это в командной строке, например
это:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Или в системах, в которых есть программа env, вы можете сделать это так:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Компиляция для нескольких архитектур
====================================

   Вы можете скомпилировать пакет для нескольких типов компьютеров на
в то же время, помещая объектные файлы для каждой архитектуры в их
собственный каталог. Для этого вы должны использовать версию `make ', которая
поддерживает переменную `VPATH ', такую ​​как GNU` make'. cd к
каталог, в который вы хотите, чтобы объектные файлы и исполняемые файлы запускались и запускались
сценарий `configure '. `configure 'автоматически проверяет наличие
исходный код в каталоге, в котором находится `configure ', и в` ..'.

   Если вам нужно использовать make, который не поддерживает VPATH
переменная, вам нужно компилировать пакет для одной архитектуры за раз
в каталоге исходного кода. После того, как вы установили пакет для
одна архитектура, используйте `make distclean 'перед изменением конфигурации для другой
архитектура.

Имена установок
==================

   По умолчанию `make install 'установит файлы пакета в
/ usr / local / bin, / usr / local / man и т. д. Вы можете указать
префикс установки, отличный от `/ usr / local ', давая` configure'
опция `--prefix = ПУТЬ '.

   Вы можете указать отдельные префиксы установки для
файлы, зависящие от архитектуры, и файлы, не зависящие от архитектуры. если ты
укажите `configure 'параметр --exec-prefix = PATH, пакет будет использовать
ПУТЬ как префикс для установки программ и библиотек.
В документации и других файлах данных по-прежнему будет использоваться обычный префикс.

   Если пакет поддерживает это, вы можете установить программы
с дополнительным префиксом или суффиксом к их именам, давая `configure '
опция `--program-prefix = PREFIX 'или` --program-suffix = SUFFIX'.

Дополнительные функции
=================

   Некоторые пакеты обращают внимание на параметры `--enable-FEATURE ', чтобы
configure, где FEATURE указывает на необязательную часть пакета.
Они также могут обратить внимание на параметры `--with-PACKAGE ', где PACKAGE
это что-то вроде gnu-as или x (для X Window System). В
`README 'должен упоминать любые параметры` --enable-' и `--with- ', которые
пакет распознает.

   Для пакетов, которые используют систему X Window, `configure 'обычно может
автоматически найти файлы X и библиотеки, но если этого не произойдет,
вы можете использовать параметры `configure '--x-includes = DIR' и
`--x-libraries = DIR ', чтобы указать их расположение.

Указание типа системы
==========================

   Могут быть некоторые функции, которые `configure 'не может понять
автоматически, но необходимо определить по типу хоста пакет
будет работать дальше. Обычно `configure 'может это выяснить, но если он печатает
сообщение о том, что он не может угадать тип хоста, дайте ему
Параметр --host = TYPE. ТИП может быть сокращенным названием системы.
тип, такой как `sun4 ', или каноническое имя с тремя полями:
     ЦП-КОМПАНИЯ-СИСТЕМА

См. Файл `config.sub 'для получения информации о возможных значениях каждого поля. Если
config.sub не входит в этот пакет, значит, этот пакет не
нужно знать тип хоста.

   Если вы создаете инструменты компилятора для кросс-компиляции, вы также можете
используйте параметр --target = TYPE, чтобы выбрать тип системы, в которой они будут
создать код для и опцию `--build = TYPE 'для выбора типа
система, в которой вы компилируете пакет.

Совместное использование настроек по умолчанию
================

   Если вы хотите установить значения по умолчанию для скриптов `configure 'для совместного использования,
вы можете создать сценарий оболочки сайта под названием `config.site ', который дает
значения по умолчанию для таких переменных, как `CC ',` cache_file' и `prefix '.
`configure 'ищет` PREFIX / share / config.site', если он существует, затем
`PREFIX / etc / config.site ', если он существует. Или вы можете установить
Переменная среды CONFIG_SITE в местоположение сценария сайта.
Предупреждение: не все сценарии `configure 'ищут сценарий сайта.

Управление операциями
==================

   `configure 'распознает следующие параметры для управления тем, как он
работает.

`--cache-file = ФАЙЛ '
     Используйте и сохраните результаты тестов в ФАЙЛ вместо
     `./config.cache '. Установите для ФАЙЛА значение `/ dev / null ', чтобы отключить кеширование, для
     отладка `configure '.

`--help '
     Распечатайте сводку опций для `configure 'и выйдите.

`--quiet '
`--silent '
`-q '
     Не печатайте сообщения о том, какие проверки выполняются.

`--srcdir = DIR '
     Найдите исходный код пакета в каталоге DIR. Как правило
     `configure 'может определить этот каталог автоматически.

`--version '
     Распечатайте версию Autoconf, использованную для генерации `configure '
     скрипт и выйдите.

`configure 'также принимает некоторые другие, не очень полезные параметры.

