/***************************************************************************
                          scenario.h  -  description
                             -------------------
    begin                : Fri Jan 19 2001
    copyright            : (C) 2001 by Michael Speck
    email                : kulkanie@gmx.net
 ***************************************************************************/
/***************************************************************************
                     Modifications by LGD team 2012+.
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef __SCENARIO_H
#define __SCENARIO_H

struct _Unit;

#define DEBUG_CAMPAIGN 1

#define MAX_TOKENS 500
#define MAX_SCENARIO_LINE 5000

/*
====================================================================
Настройка двигателя. 'name' - это название сценария или сохранения.
файл. 'type' указывает, что делать с оставшимися данными в этом
структура:
  INIT_CAMP: загрузить всю кампанию и использовать значения по умолчанию для
             сценарии
  INIT_SCEN: используйте информацию о настройке, чтобы перезаписать настройки сценария по умолчанию
  DEFAULT:   используйте значения по умолчанию и установите 'setup'
  LOAD:      загрузить игру и установить 'setup'
  CAMP_BRIEFING: показать диалог брифинга кампании
  RUN_TITLE: показать титульный экран и запустить меню
ctrl - это элемент управления проигрывателем (PLAYER_CTRL_HUMAN, PLAYER_CTRL_CPU)
====================================================================
*/
enum {
    SETUP_UNKNOWN = 0,
    SETUP_INIT_CAMP,
    SETUP_INIT_SCEN,
    SETUP_LOAD_GAME,
    SETUP_DEFAULT_SCEN,
    SETUP_CAMP_BRIEFING,
    SETUP_RUN_TITLE
};
typedef struct {
    char fname[256];    /* файл ресурсов для типа загрузки */
    char camp_entry_name[256]; /* запись кампании для загрузки */
    int  type;
    char *load_name; /* в случае LOAD_GAME это идентификатор слота */
    /* информация о кампании должна быть установлена ​​для SETUP_CAMP_INIT */
    const char *scen_state; /* состояние сценария для начала кампании */
    /* специфическая для сценария информация, которая загружается с помощью scene_load_info () */
    int  player_count;
    int  *ctrl;
    char **modules;
    char **names;
} Setup;

/*
====================================================================
Информационный сценарий
====================================================================
*/
typedef struct {
    char *fname;    /* сценарий знает свое собственное имя_файла в пути сценария */
    char *mod_name; /* имя папки мода сценария */
    char *name;     /* название сценария */
    char *desc;     /* описание */
    char *authors;  /* строка со всеми именами авторов */
    Date start_date;/* дата начала сценария */
    int turn_limit;     /* сценарий завершается не позднее, чем после этого числа ходов */
    int days_per_turn;
    int turns_per_day;  /* строка даты поворота вычисляется из этих значений
                           и начальная дата */
    int player_count;   /* количество игроков */
    int weather_zone;   /* сценарий погодной зоны */
} Scen_Info;

/*
====================================================================
Условия победы
====================================================================
*/
enum {
    VCOND_CHECK_EVERY_TURN = 0,
    VCOND_CHECK_LAST_TURN
};
enum {
    VSUBCOND_CTRL_ALL_HEXES = 0,
    VSUBCOND_CTRL_HEX,
    VSUBCOND_TURNS_LEFT,
    VSUBCOND_CTRL_HEX_NUM,
    VSUBCOND_UNITS_KILLED,
    VSUBCOND_UNITS_SAVED
};
typedef struct {
    int type;           /* введите, как указано выше */
    Player *player;     /* игрок это условие проверено для */
    int x,y;            /* специальный */
    int count;
    char tag[32];       /* тег группы объектов */
} VSubCond;
typedef struct {
    VSubCond *subconds_or;    /* дополнительные условия, связанные с логическим или */
    VSubCond *subconds_and;   /* дополнительные условия, связанные с логическими и */
    int sub_or_count;
    int sub_and_count;
    char result[64];
    char message[128];
} VCond;

/*
====================================================================
Загрузите сценарий.
====================================================================
*/
int scen_load( char *fname );

/*
====================================================================
Загрузить описание сценария (вновь выделенная строка)
и настройте настройку :) кроме типа, который устанавливается, когда
двигатель выполняет действие нагрузки.
====================================================================
*/
char *scen_load_info( char *fname );

/*
====================================================================
Заполните часть сценария в 'setup' загруженным игроком
Информация.
====================================================================
*/
void scen_set_setup();

/*
====================================================================
Удалите указатели содержимого сценария в 'настройке'
(загружается с помощью scene_load_info ())
====================================================================
*/
void scen_clear_setup();

/*
====================================================================
Удалить сценарий
====================================================================
*/
void scen_delete();

/*
====================================================================
Проверить, уничтожен ли юнит, установить текущую атаку и движение.
Если передается SCEN_PREP_UNIT_FIRST, окопание не изменяется.
====================================================================
*/
enum {
    SCEN_PREP_UNIT_FIRST = 0,
    SCEN_PREP_UNIT_NORMAL,
    SCEN_PREP_UNIT_DEPLOY
};
void scen_prep_unit( Unit *unit, int type );

/** Установите no_purchase для всех стран, у которых нет покупок
 * единицы в текущей библиотеке единиц или не имеют ни флага, ни единицы под
 * контроль (в этом сценарии нет). */
void update_nations_purchase_flag();

/*
====================================================================
Проверить, выполнены ли условия победы и если да
вернуть True. 'результат' используется тогда
для определения следующего сценария кампании.
Если установлено «after_last_turn», это проверка, вызываемая end_turn ().
Если ни одно условие не выполнено, используется условие else (очень
первый).
====================================================================
*/
int scen_check_result( int after_last_turn );
/*
====================================================================
Верните True, если сценарий выполнен.
====================================================================
*/
int scen_done();
/*
====================================================================
Строка результата возврата.
====================================================================
*/
char *scen_get_result();
/*
====================================================================
Сообщение с результатом возврата
====================================================================
*/
char *scen_get_result_message();
/*
====================================================================
Четкий результат и сообщение
====================================================================
*/
void scen_clear_result();

/*
====================================================================
Проверьте уровень подачи блока. (шестиугольные плитки с SUPPLY_GROUND
есть 100% поставка.
====================================================================
*/
void scen_adjust_unit_supply_level( Unit *unit );

/*
====================================================================
Получить текущую погоду / прогноз
====================================================================
*/
int scen_get_weather( void );
int scen_get_forecast( void );

/*
====================================================================
Получить строку даты текущей даты.
====================================================================
*/
void scen_get_date( char *date_str );

/*
====================================================================
Получить / добавить потери для класса юнита и игрока.
====================================================================
*/
int scen_get_casualties( int player, int class );
int scen_inc_casualties( int player, int class );
/*
====================================================================
Add потерь для подразделения. Относительно классов юнитов и транспорта.
====================================================================
*/
int scen_inc_casualties_for_unit( struct _Unit *unit );

/*
====================================================================
Генератор случайной погоды Panzer General с использованием обнаруженного алгоритма и
задокументировано @Rudankort на
http://www.panzercentral.com/forum/viewtopic.php?p=577467#p577467
====================================================================
*/
void scen_create_random_weather( int start_water_level, int cur_period );

/*
====================================================================
Сохранение / загрузка основных модулей для передачи между сценариями.
====================================================================
*/
int scen_save_core_units( );
int scen_load_core_units( );

#endif
