/***************************************************************************
                          image.h  -  description
                             -------------------
    begin                : Tue Mar 21 2002
    copyright            : (C) 2001 by Michael Speck
    email                : kulkanie@gmx.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef __IMAGE_H
#define __IMAGE_H

/*
====================================================================
Поверхностный буфер. Используется для буферизации частей поверхности.
====================================================================
*/
typedef struct {
    SDL_Rect buf_rect;   /* исходный прямоугольник в буфере */
    SDL_Rect surf_rect;  /* пункт назначения в серфинге */
    SDL_Rect old_rect;   /* обновить область старой позиции при перемещении */
    SDL_Surface *buf;    /* фактический буфер */
    SDL_Surface *surf;   /* поверхностный буфер назначается */
    int hide;            /* если True этот буфер не рисуется */
    int moved;           /* если это False и ход называется old_rect
                            установлен в старый регион */
    int recently_hidden; /* установить, если скрыт и очищен buffer_draw */
} Buffer;

/*
====================================================================
Создайте буфер размером w, h с позицией x, y по умолчанию в surf.
Перед вызовом этого SDL должен быть инициализирован.
====================================================================
*/
Buffer* buffer_create( int w, int h, SDL_Surface *surf, int x, int y );
void buffer_delete( Buffer **buffer );

/*
====================================================================
Скрыть этот буфер с поверхности (без действий получения / рисования)
====================================================================
*/
void buffer_hide( Buffer *buffer, int hide );

/*
====================================================================
Получить буфер из buffer-> surf.
====================================================================
*/
void buffer_get( Buffer *buffer );

/*
====================================================================
Отрисовать буфер в buffer-> surf.
====================================================================
*/
void buffer_draw( Buffer *buffer );

/*
====================================================================
Добавить прямоугольники обновления, включая движение и недавнее скрытие.
====================================================================
*/
void buffer_add_refresh_rects( Buffer *buffer );

/*
====================================================================
Измените настройки буфера. Не включает ни get (), ни draw ().
Максимальный размер задается начальным размером буферов.
====================================================================
*/
void buffer_move( Buffer *buffer, int x, int y );
void buffer_resize( Buffer *buffer, int w, int h );
void buffer_set_surface( Buffer *buffer, SDL_Surface *surf );
void buffer_get_geometry(Buffer *buffer, int *x, int *y, int *w, int *h );
SDL_Rect *buffer_get_surf_rect( Buffer *buffer );

/*
====================================================================
Образ. Используется для добавления графики верхнего уровня (например, курсора). Это либо
нарисован полностью или частично (зависит от img_rect).
====================================================================
*/
typedef struct {
    Buffer *bkgnd;          /* фоновый буфер для изображения */
    SDL_Rect img_rect;      /* исходный прямоугольник в изображении */
    SDL_Surface *img;       /* образ */
} Image;

/*
====================================================================
Создайте образ. Поверхность изображения удаляется функцией image_delete ().
Область изображения (которая на самом деле нарисована) инициируется
0,0, buf_w, buf_h, где buf_w или buw_h 0 означает использование всего изображения.
Максимальный размер области ограничен начальным размером области.
Текущая позиция отрисовки - x, y в "surf".
====================================================================
*/
Image *image_create( SDL_Surface *img, int buf_w, int buf_h, SDL_Surface *surf, int x, int y );
void image_delete( Image **image );

/*
====================================================================
Полностью скрыть изображение
====================================================================
*/
#define image_hide( image, hide ) buffer_hide( image->bkgnd, hide )

/*
====================================================================
Получить фон изображения
====================================================================
*/
#define image_get_bkgnd( img ) buffer_get( img->bkgnd )

/*
====================================================================
Скрыть изображение (переместить фон в текущее положение).
====================================================================
*/
#define image_draw_bkgnd( image ) buffer_draw( image->bkgnd )

/*
====================================================================
Нарисуйте область изображения в текущее положение.
Сначала сохраняет фон.
При необходимости добавьте refresh_rects, включая движение и скрытие
обновляет.
====================================================================
*/
void image_draw( Image *image );

/*
====================================================================
Измените настройки изображения. Не содержит рисунков (ни
изображение или фон), но при необходимости можно изменить размер фона.
====================================================================
*/
#define image_move( img, x, y ) buffer_move( img->bkgnd, x, y )
#define image_set_surface( img, surf ) buffer_set_surface( img->bkgnd, surf )
void image_set_region( Image *image, int x, int y, int w, int h );


/*
====================================================================
Анимация. Изображение, которое меняет область рисования на каждой "скорости"
миллисекунды (следующий кадр).
На одной поверхности можно хранить несколько анимаций.
Каждая строка представляет собой анимацию, а каждый столбец #i - номер кадра.
#i каждой анимации.
====================================================================
*/
typedef struct {
    Image *img;     /* рамка графика */
    int playing;    /* истина, если анимация воспроизводится */
    int loop;       /* истина, если анимация находится в бесконечном цикле */
    int speed;      /* время в миллисекундах отображается кадр */
    int cur_time;   /* если это превышает скорость, воспроизводится следующий кадр (или анимация останавливается) */
} Anim;

/*
====================================================================
Создайте анимацию. Поверхность анимации удаляется
anim_delete (). Размер буфера каждого кадра - frame_w, frame_h.
Текущая позиция отрисовки - x, y в "surf".
По умолчанию анимация останавливается и устанавливается на первый кадр.
первой анимации.
По умолчанию анимация скрыта.
====================================================================
*/
Anim* anim_create( SDL_Surface *gfx, int speed, int frame_w, int frame_h, SDL_Surface *surf, int x, int y );
void anim_delete( Anim **anim );

/*
====================================================================
Рисуем анимацию
====================================================================
*/
#define anim_hide( anim, hide ) buffer_hide( anim->img->bkgnd, hide )
#define anim_get_bkgnd( anim ) buffer_get( anim->img->bkgnd )
#define anim_draw_bkgnd( anim ) buffer_draw( anim->img->bkgnd )
#define anim_draw( anim ) image_draw( anim->img )

/*
====================================================================
Изменить настройки анимации
====================================================================
*/
#define anim_move( anim, x, y ) buffer_move( anim->img->bkgnd, x, y )
#define anim_set_surface( anim, surf ) buffer_set_surface( anim->img->bkgnd, surf )
void anim_set_speed( Anim *anim, int speed );
void anim_set_row( Anim *anim, int id );
void anim_set_frame( Anim *anim, int id );
void anim_play( Anim *anim, int loop );
void anim_stop( Anim *anim );
void anim_update( Anim *anim, int ms );


/*
====================================================================
Рамка. Поверхность содержимого модифицируется и вместе с рамкой
он создает образ. Если альфа <255, фон затемняется
используя сначала теневую поверхность при рисовании.
====================================================================
*/
typedef struct {
    Image *img;
    SDL_Surface *shadow;
    SDL_Surface *contents;
    SDL_Surface *frame;
    int alpha;
} Frame;

/*
====================================================================
Создайте рамку. Если альфа> 0, фон
затенение за счет использования теневой поверхности при рисовании.
Размер буфера, изображения и содержимого равен
определяется размерами кадра изображения img.
Текущая позиция отрисовки - x, y в "surf".
====================================================================
*/
Frame *frame_create( SDL_Surface *img, int alpha, SDL_Surface *surf, int x, int y );
void frame_delete( Frame **frame );

/*
====================================================================
Нарисовать рамку
====================================================================
*/
void frame_hide( Frame *frame, int hide );
#define frame_get_bkgnd( frame ) buffer_get( frame->img->bkgnd )
#define frame_draw_bkgnd( frame ) buffer_draw( frame->img->bkgnd )
void frame_draw( Frame *frame );

/*
====================================================================
Изменить / получить настройки кадра
====================================================================
*/
#define frame_move( frame, x, y ) buffer_move( frame->img->bkgnd, x, y )
#define frame_set_surface( frame, surf ) buffer_set_surface( frame->img->bkgnd, surf )
#define frame_get_geometry(frame,x,y,w,h) buffer_get_geometry(frame->img->bkgnd,x,y,w,h)
void frame_apply( Frame *frame ); /* применить измененное содержимое к изображению */
#define frame_get_width( frame ) ( (frame)->img->img->w )
#define frame_get_height( frame ) ( (frame)->img->img->h )

#endif
