/***************************************************************************
                          player.h  -  description
                             -------------------
    begin                : Fri Jan 19 2001
    copyright            : (C) 2001 by Michael Speck
    email                : kulkanie@gmx.net
 ***************************************************************************/
/***************************************************************************
                     Modifications by LGD team 2012+.
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef __PLAYER_H
#define __PLAYER_H

#include "list.h"
#include "unit_lib.h"

/*
====================================================================
Информация об игроке. Игроки создаются по сценарию, но управляются
этим модулем.
====================================================================
*/
enum {
    PLAYER_CTRL_NOBODY = 0,
    PLAYER_CTRL_HUMAN,
    PLAYER_CTRL_CPU
};
typedef struct {
    char *id;           /* идентификация */
    char *name;         /* настоящее имя */
    int ctrl;           /* контролируется человеком или процессором */
    char *ai_fname;     /* dll с подпрограммами ИИ */
    int strat;          /* стратегия: -2 очень оборонительная до 2 очень агрессивная */
    int strength_row;   /* количество строк силы в значках силы */
    Nation **nations;   /* список указателей на нации, контролируемые этим игроком */
    int nation_count;   /* количество контролируемых стран */
    List *allies;       /* список союзников игрока */
    int core_limit;     /* максимальное количество основных блоков (размещенных + заказанных) */
    int unit_limit;     /* максимальное количество единиц (размещенных + заказанных) */
    int air_trsp_count; /* количество авиаперевозчиков */
    int sea_trsp_count; /* количество морских перевозчиков */
    Unit_Lib_Entry *air_trsp; /* воздушный транспортер по умолчанию */
    Unit_Lib_Entry *sea_trsp; /* морской транспортер по умолчанию */
    int air_trsp_used;  /* количество используемых авиатранспортеров */
    int sea_trsp_used;  /* вот */
    int orient;         /* начальная ориентация */
    int cur_prestige;       /* текущее количество престижа */
    int *prestige_per_turn; /* сумма, добавляемая в начале каждого хода */
    int no_init_deploy; /* предоставил ли текущий сценарий какие-либо начальные
                           шестигранные плитки, где размещение разрешено */
    /* обратные вызовы ИИ загружены из модуля ai_fname */
    int uber_units;     /* переменная, используемая для включения / отключения единиц убер */
    int force_retreat;  /* переменная, используемая для включения / выключения принудительного отступления */
    void (*ai_init)(void);
    void (*ai_run)(void);
    void (*ai_finalize)(void);
#ifdef USE_DL
    void *ai_mod_handle; /* дескриптор модуля ИИ */
#endif
} Player;

/*
====================================================================
Добавить игрока в список игроков.
====================================================================
*/
void player_add( Player *player );

/*
====================================================================
Удалить запись игрока. Передайте как void * для совместимости с
list_delete
====================================================================
*/
void player_delete( void *ptr );

/*
====================================================================
Удалить всех игроков.
====================================================================
*/
void players_delete();

/*
====================================================================
Получите самого первого игрока.
====================================================================
*/
Player* players_get_first();

/*
====================================================================
Получить следующего игрока в цикле и также установить для new_turn значение true, если все
игроки закончили свой ход, и пришло время
нового хода.
====================================================================
*/
Player *players_get_next( int *new_turn );

/*
====================================================================
Проверьте, кто будет следующим игроком, но не выбирайте его.
====================================================================
*/
Player *players_test_next();

/*
====================================================================
Установить и получить игрока как текущий по индексу.
====================================================================
*/
Player *players_set_current( int index );

/*
====================================================================
Проверьте, являются ли эти два игрока союзниками.
====================================================================
*/
int player_is_ally( Player *player, Player *second );

/*
====================================================================
Получите игрока, который контролирует нацию
====================================================================
*/
Player *player_get_by_nation( Nation *nation );

/*
====================================================================
Получить игрока с этой строкой идентификатора.
====================================================================
*/
Player *player_get_by_id( char *id );

/*
====================================================================
Получить игрока с этим индексом
====================================================================
*/
Player *player_get_by_index( int index );

/*
====================================================================
Получить индекс игрока в списке
====================================================================
*/
int player_get_index( Player *player );

#endif
