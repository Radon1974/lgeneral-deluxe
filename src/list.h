/***************************************************************************
                          list.h  -  description
                             -------------------
    begin                : Sun Sep 2 2001
    copyright            : (C) 2001 by Michael Speck
    email                : kulkanie@gmx.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef __LIST_H
#define __LIST_H

#ifdef __cplusplus
extern "C" {
#endif

/*
====================================================================
Динамический список, обрабатывающий данные как недействительные указатели.
====================================================================
*/
typedef struct _List_Entry {
    struct _List_Entry      *next;
    struct _List_Entry      *prev;
    void                    *item;
} List_Entry;
typedef struct _List {
    int             auto_delete;
    int             count;
    List_Entry      head;
    List_Entry      tail;
    void            (*callback)(void*);
    List_Entry      *cur_entry;
} List;
typedef struct _ListIterator {
    List *l;
    List_Entry *cur_entry;
} ListIterator;

/*
====================================================================
Создать новый список
  auto_delete:  Освободить память указателя данных при удалении записи
  callback:     Используйте этот обратный вызов, чтобы освободить память для данных, включая
                сам указатель данных.
Возвращаемое значение: Указатель списка
====================================================================
*/
enum { LIST_NO_AUTO_DELETE = 0, LIST_AUTO_DELETE };
enum { LIST_NO_CALLBACK = 0 };
List *list_create( int auto_delete, void (*callback)(void*) );
/*
====================================================================
Удалить список и записи.
====================================================================
*/
void list_delete( List *list );
/*
====================================================================
Удалить все записи, но сохранить список. Сбросить current_entry в голову
указатель.
====================================================================
*/
void list_clear( List *list );
/*
====================================================================
Вставить новый элемент в позицию.
Возвращаемое значение: True в случае успеха иначе False.
====================================================================
*/
int list_insert( List *list, void *item, int pos );
/*
====================================================================
Добавить новый элемент в конец списка.
====================================================================
*/
int list_add( List *list, void *item );
/*
====================================================================
Удалить элемент поз. Если это было текущее обновление записи
current_entry на действительный предыдущий указатель.
Возвращаемое значение: True в случае успеха иначе False.
====================================================================
*/
int list_delete_pos( List *list, int pos );
/*
====================================================================
Удалить элемент, если он есть в списке. Если это было текущее обновление записи
current_entry на действительный предыдущий указатель.
Возвращаемое значение: True в случае успеха иначе False.
====================================================================
*/
int list_delete_item( List *list, void *item );
/*
====================================================================
Удалить запись.
====================================================================
*/
int list_delete_entry( List *list, List_Entry *entry );
/*
====================================================================
Получить элемент из позиции, если в списке.
Возвращаемое значение: указатель на элемент, если он найден, другой указатель NULL.
====================================================================
*/
void* list_get( List *list, int pos );
/*
====================================================================
Проверить, есть ли элемент в списке.
Возвращаемое значение: позиция элемента else -1.
====================================================================
*/
int list_check( List *list, void *item );
/*
====================================================================
Вернуть первый элемент, хранящийся в списке, и установить для него current_entry
вход.
Возвращаемое значение: указатель на элемент, если он найден, другой указатель NULL.
====================================================================
*/
void* list_first( List *list );
/*
====================================================================
Вернуть последний элемент, хранящийся в списке, и установить для него current_entry
вход.
Возвращаемое значение: указатель на элемент, если он найден, другой указатель NULL.
====================================================================
*/
void* list_last( List *list );
/*
====================================================================
Вернуть элемент в current_entry.
Возвращаемое значение: указатель на элемент, если он найден, другой указатель NULL.
====================================================================
*/
void* list_current( List *list );
/*
====================================================================
Вернуть итератор в список.
====================================================================
*/
ListIterator list_iterator( List *list );
/*
====================================================================
Сбросить current_entry в начало списка.
====================================================================
*/
void list_reset( List *list );
/*
====================================================================
Получить следующий элемент и обновить current_entry (сбросить, если достигнут хвост).
Возвращаемое значение: указатель элемента, если он найден, иначе Null (если конец списка).
====================================================================
*/
void* list_next( List *list );
/*
====================================================================
Получить предыдущий элемент и обновить current_entry.
Возвращаемое значение: указатель элемента, если он найден, иначе Null (если заголовок списка).
====================================================================
*/
void* list_prev( List *list );
/*
====================================================================
Удалите текущую запись, если нет хвоста или головы. Это запись
который содержит последний элемент, возвращенный list_next / prev ().
Возвращаемое значение: Истина, если это была допустимая удаляемая запись.
====================================================================
*/
int list_delete_current( List *list );
/*
====================================================================
Проверьте, пуст ли список.
Возвращаемое значение: Истина, если счетчик списка равен 0, иначе Ложь.
====================================================================
*/
int list_empty( List *list );
/*
====================================================================
Возвратная запись, содержащая переданный элемент.
Возвращаемое значение: Истина, если запись найдена, иначе Ложь.
====================================================================
*/
List_Entry *list_entry( List *list, void *item );
/*
====================================================================
Перенести запись из одного списка в другой, удалив из
'source' и добавив к 'dest' таким образом, если источник не содержит
элемент this эквивалентен list_add (dest, item).
====================================================================
*/
void list_transfer( List *source, List *dest, void *item );
/*
====================================================================
Deqeue первой записи списка. (поэтому не следует использовать auto_delete)
====================================================================
*/
void *list_dequeue( List *list );

/*
====================================================================
Возвращает текущий элемент и увеличивает итератор.
====================================================================
*/
void *list_iterator_next( ListIterator *it );
/*
====================================================================
Проверяет, есть ли в списке больше элементов.
====================================================================
*/
int list_iterator_has_next( ListIterator *it );

#ifdef __cplusplus
};
#endif

#endif
